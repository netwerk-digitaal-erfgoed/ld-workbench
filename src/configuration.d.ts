/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * JSON Schema for LDWorkbench.
 * It helps with the writing of the configuration needed to run LDWorkbench pipelines.
 */
export interface Configuration {
  /**
   * The name of your pipeline. It must be unique over all your configurations.
   */
  name: string;
  /**
   * An optional description for your pipeline.
   */
  description?: string;
  /**
   * An optional base directory for files referenced by `file://...` paths. This defaults to the directory that contains the YAML configuration file.
   */
  baseDir?: string;
  /**
   * The file where the final result of your pipeline is saved.
   */
  destination?: string;
  /**
   * A pipeline stage consists of an iterator and one or more generators.
   *
   * @minItems 1
   */
  stages: [
    {
      /**
       * The name of the stage. It must be unique within the pipeline.
       */
      name: string;
      iterator: {
        /**
         * SPARQL SELECT query that returns a `$this` binding for each URI that will be passed to the generator(s). Either an inline string (`SELECT $this WHERE {...}`) or a reference to a file (`file://...`) that contains the query.
         */
        query: string;
        /**
         * SPARQL endpoint for the iterator. If it starts with `file://`, a local RDF file is queried. If omitted the result of the previous stage is used.
         */
        endpoint?: string;
        /**
         * Optional name of the store this endpoint should be imported into before querying. If omitted, the endpoint is queried directly.
         */
        importTo?: string;
        /**
         * Number of `$this` bindings retrieved per query. Defaults to the LIMIT value of your iterator query or 10 if no LIMIT is present.
         */
        batchSize?: number;
        /**
         * Human-readable time delay for requests to the the iterator’s SPARQL endpoint (e.g. `5ms`, `100 milliseconds`, `1s`).
         */
        delay?: string;
      };
      /**
       * @minItems 1
       */
      generator: [
        {
          /**
           * SPARQL CONSTRUCT query that takes a `$this` binding from the iterator and generates triples for it. Either an inline string (`CONSTRUCT $this schema:name ?name WHERE {$this ...}`) or a reference to a file (`file://...`) that contains the query.
           */
          query: string;
          /**
           * The SPARQL endpoint for the generator. If it starts with `file://`, a local RDF file is queried. If omitted, the endpoint of the iterator is used.
           */
          endpoint?: string;
          /**
           * Overrule the generator's behaviour of fetching results for 10 bindings of `$this` per request.
           */
          batchSize?: number;
        },
        ...{
          /**
           * SPARQL CONSTRUCT query that takes a `$this` binding from the iterator and generates triples for it. Either an inline string (`CONSTRUCT $this schema:name ?name WHERE {$this ...}`) or a reference to a file (`file://...`) that contains the query.
           */
          query: string;
          /**
           * The SPARQL endpoint for the generator. If it starts with `file://`, a local RDF file is queried. If omitted, the endpoint of the iterator is used.
           */
          endpoint?: string;
          /**
           * Overrule the generator's behaviour of fetching results for 10 bindings of `$this` per request.
           */
          batchSize?: number;
        }[]
      ];
      /**
       * The optional path where the results are saved. If omitted, a temporary file will be created.
       */
      destination?: string;
    },
    ...{
      /**
       * The name of the stage. It must be unique within the pipeline.
       */
      name: string;
      iterator: {
        /**
         * SPARQL SELECT query that returns a `$this` binding for each URI that will be passed to the generator(s). Either an inline string (`SELECT $this WHERE {...}`) or a reference to a file (`file://...`) that contains the query.
         */
        query: string;
        /**
         * SPARQL endpoint for the iterator. If it starts with `file://`, a local RDF file is queried. If omitted the result of the previous stage is used.
         */
        endpoint?: string;
        /**
         * Optional name of the store this endpoint should be imported into before querying. If omitted, the endpoint is queried directly.
         */
        importTo?: string;
        /**
         * Number of `$this` bindings retrieved per query. Defaults to the LIMIT value of your iterator query or 10 if no LIMIT is present.
         */
        batchSize?: number;
        /**
         * Human-readable time delay for requests to the the iterator’s SPARQL endpoint (e.g. `5ms`, `100 milliseconds`, `1s`).
         */
        delay?: string;
      };
      /**
       * @minItems 1
       */
      generator: [
        {
          /**
           * SPARQL CONSTRUCT query that takes a `$this` binding from the iterator and generates triples for it. Either an inline string (`CONSTRUCT $this schema:name ?name WHERE {$this ...}`) or a reference to a file (`file://...`) that contains the query.
           */
          query: string;
          /**
           * The SPARQL endpoint for the generator. If it starts with `file://`, a local RDF file is queried. If omitted, the endpoint of the iterator is used.
           */
          endpoint?: string;
          /**
           * Overrule the generator's behaviour of fetching results for 10 bindings of `$this` per request.
           */
          batchSize?: number;
        },
        ...{
          /**
           * SPARQL CONSTRUCT query that takes a `$this` binding from the iterator and generates triples for it. Either an inline string (`CONSTRUCT $this schema:name ?name WHERE {$this ...}`) or a reference to a file (`file://...`) that contains the query.
           */
          query: string;
          /**
           * The SPARQL endpoint for the generator. If it starts with `file://`, a local RDF file is queried. If omitted, the endpoint of the iterator is used.
           */
          endpoint?: string;
          /**
           * Overrule the generator's behaviour of fetching results for 10 bindings of `$this` per request.
           */
          batchSize?: number;
        }[]
      ];
      /**
       * The optional path where the results are saved. If omitted, a temporary file will be created.
       */
      destination?: string;
    }[]
  ];
  /**
   * A list of SPARQL 1.1 Graph Stores that can be used in the pipeline.
   */
  stores?: {
    /**
     * The store’s query URL.
     */
    queryUrl: string;
    /**
     * The store’s Graph Store HTTP Protocol URL.
     */
    storeUrl?: string;
    /**
     * The store’s SPARQL Update URL.
     */
    updateUrl?: string;
  }[];
}
