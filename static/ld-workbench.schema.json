{
  "$id": "https://raw.githubusercontent.com/netwerk-digitaal-erfgoed/ld-workbench/main/static/ld-workbench.schema.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LDWorkbenchConfiguration",
  "description": "JSON Schema for LDWorkbench.\nIt helps with the writing of the configuration needed to run LDWorkbench pipelines.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "name": {
      "type": "string",
      "description": "The name of your pipeline, it must be unique over all your configurations."
    },
    "description": {
      "type": "string",
      "description": "An optional description for your pipeline."
    },
    "destination": {
      "type": "string",
      "description": "The file where the final result of your pipeline is saved."
    },
    "stages": {
      "type": "array",
      "description": "This is where you define the individual iterator/generator for each step.",
      "minItems": 1,
      "items": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of your pipeline step, it must be unique within one configuration."
          },
          "iterator": {
            "type": "object",
            "additionalProperties": false,
            "required": ["query"],
            "properties": {
              "query": {
                "type": "string",
                "description": "Path (prefixed with \"file://\") or SPARQL Query \nthat makes the iterator using SPARQL select."
              },
              "endpoint": {
                "type": "string",
                "description": "The SPARQL endpoint for the iterator. \nIf it starts with \"file://\", a local RDF file is queried.\nIf omitted the result of the previous file is used."
              },
              "batchSize": {
                "type": "number",
                "description": "Overrule the iterator's behavior of fetching 10 results per request, regardless of any limit's in your query."
              }
            }
          },
          "generator": {
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": ["query"],
              "properties": {
                "query": {
                  "type": "string",
                  "description": "Path (prefixed with \"file://\") or SPARQL Query \nthat makes the generator using SPARQL construct."
                },
                "endpoint": {
                  "type": "string",
                  "description": "The SPARQL endpoint for the generator. \nIf it starts with \"file://\", a local RDF file is queried.\nIf omitted the endpoint of the Iterator is used."
                },
                "batchSize": {
                  "type": "number",
                  "description": "Overrule the generator's behavior of fetching results for 10 bindings of $this per request."
                }
              }
            }
          },
          "destination": {
            "type": "string",
            "description": "The file where the results are saved. \nThis is not a required property, \nif omitted a temporary file will be created automatically."
          }
        },
        "required": ["name", "iterator", "generator"]
      }
    }
  },
  "required": ["name", "stages"]
}
